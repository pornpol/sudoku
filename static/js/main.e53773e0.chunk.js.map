{"version":3,"sources":["Cell.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","number","isInitial","onChange","className","onClick","e","Board","validate","board","isValid","i","horizontal","Set","vertical","square","j","add","Math","floor","delete","size","restartBoard","fetch","then","res","json","jsonResponse","console","log","setState","timer","initial","map","row","item","onSubmit","state","clearInterval","interval","statusText","this","setInterval","key","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e53773e0.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Cell = ({ number, isInitial, onChange }) => {\n  return (\n    <div\n      className={`cell ${isInitial ? \"initial\" : \"\"}`}\n      onClick={e => {\n        if (isInitial) return;\n        onChange((number + 1) % 5);\n      }}\n    >\n      {number !== 0 && number}\n    </div>\n  );\n};\n\nexport default Cell;\n","import React, { Component } from \"react\";\nimport Cell from \"./Cell\";\n\nclass Board extends Component {\n  constructor() {\n    super();\n    this.state = {\n      board: [\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0]\n      ],\n      initial: [\n        [false, false, false, false],\n        [false, false, false, false],\n        [false, false, false, false],\n        [false, false, false, false]\n      ],\n      statusText: \"\",\n      timer: 0\n    };\n  }\n\n  validate = board => {\n    let isValid = true;\n    for (let i = 0; i < 4; i++) {\n      const horizontal = new Set();\n      const vertical = new Set();\n      const square = new Set();\n      for (let j = 0; j < 4; j++) {\n        horizontal.add(board[i][j]);\n        vertical.add(board[j][i]);\n        square.add(\n          board[2 * (i % 2) + (j % 2)][\n            2 * Math.floor(i / 2) + Math.floor(j / 2)\n          ]\n        );\n      }\n      horizontal.delete(0);\n      vertical.delete(0);\n      square.delete(0);\n      if (horizontal.size !== 4 || vertical.size !== 4 || square.size !== 4) {\n        isValid = false;\n      }\n    }\n    return isValid;\n  };\n\n  restartBoard = () => {\n    fetch(\n      \"https://us-central1-skooldio-courses.cloudfunctions.net/react_01/random\"\n    )\n      .then(res => {\n        return res.json();\n      })\n      .then(jsonResponse => {\n        console.log(jsonResponse);\n        this.setState({\n          board: jsonResponse.board,\n          timer: 0,\n          initial: jsonResponse.board.map(row =>\n            row.map(item => (item !== 0 ? true : false))\n          )\n        });\n      });\n  };\n\n  onSubmit = () => {\n    const isValid = this.validate(this.state.board);\n    if (isValid) clearInterval(this.interval);\n    this.setState({\n      statusText: isValid ? \"You made it!!!\" : \"Please try again\"\n    });\n  };\n\n  componentDidMount() {\n    this.interval = setInterval(\n      () => this.setState({ timer: this.state.timer + 1 }),\n      1000\n    );\n    this.restartBoard();\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  render() {\n    return (\n      <div>\n        <p className=\"timer\">Elapsed Time: {this.state.timer} second(s)</p>\n        <div className=\"board\">\n          {this.state.board.map((row, i) =>\n            row.map((number, j) => (\n              <Cell\n                key={`cell-${i}-${j}`}\n                isInitial={this.state.initial[i][j]}\n                number={number}\n                onChange={number => {\n                  const { board } = this.state;\n                  board[i][j] = number;\n                  this.setState({ board });\n                }}\n              />\n            ))\n          )}\n        </div>\n        <button className=\"restart-button\" onClick={this.restartBoard}>\n          Restart\n        </button>\n        <button onClick={this.onSubmit}>Submit</button>\n        <p>{this.state.statusText}</p>\n      </div>\n    );\n  }\n}\n\nexport default Board;\n","import React from \"react\";\nimport \"./App.css\";\nimport Board from \"./Board\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Board />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}